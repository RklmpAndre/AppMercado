package view;

import Controller.CarrinhoController;
import entity.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persist.*;
import util.*;

/**
 *
 * @author andre; arthur
 */
public class TelaLoja extends javax.swing.JFrame {

    private String usuario_id;
    private DefaultTableModel tableModel;
    private ProdutoDAO prdao;
    private Carrinho carrinho;
    private CarrinhoController cntrl;
    private ComprasDAO cdao;
    private Historico historico;

    /**
     * Creates new form TelaPrincipal
     */
    public TelaLoja() {
        
        adicionaRadioButton();

        enderecoCheckBox();

        preencherComboBoxEstado();
        preencherComboBoxProdutos();
        adminArea();
        configurarTabela();
        atualizarTabelaCarrinho();
        initComponents();
    }

    public TelaLoja(String usuario_id, Carrinho carrinho, Historico historico) {
        
        this.usuario_id = usuario_id;
        this.carrinho = carrinho;
        this.historico = historico;
        cntrl = new CarrinhoController();
        initComponents();

        prdao = ProdutoDAO.getInstance();
        cdao = ComprasDAO.getInstance();

        adicionaRadioButton();

        enderecoCheckBox();

        preencherComboBoxEstado();
        preencherComboBoxProdutos();
        adminArea();
        configurarTabela();
        atualizarTabelaCarrinho();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formaPagamentoGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        menusPainel = new javax.swing.JPanel();
        produtoLabel = new javax.swing.JLabel();
        produtosComboBox = new javax.swing.JComboBox<>();
        quantidadeSpn = new javax.swing.JSpinner();
        quantidadeLabel = new javax.swing.JLabel();
        adicionarBtn = new javax.swing.JButton();
        removerBtn = new javax.swing.JButton();
        limparBtn = new javax.swing.JButton();
        entregaPainel = new javax.swing.JPanel();
        entregaCheckBox = new javax.swing.JCheckBox();
        estadoComboBox = new javax.swing.JComboBox<>();
        estadoLabel = new javax.swing.JLabel();
        cepFormattedTextField = new javax.swing.JFormattedTextField();
        cepLabel1 = new javax.swing.JLabel();
        cidadeFormattedTextField = new javax.swing.JFormattedTextField();
        cidadeLabel = new javax.swing.JLabel();
        bairroFormattedTextField = new javax.swing.JFormattedTextField();
        bairroLabel = new javax.swing.JLabel();
        ruaFormattedTextField = new javax.swing.JFormattedTextField();
        ruaLabel = new javax.swing.JLabel();
        numeroFormattedTextField = new javax.swing.JFormattedTextField();
        numeroLabel = new javax.swing.JLabel();
        complementoFormattedTextField = new javax.swing.JFormattedTextField();
        complementoLabel = new javax.swing.JLabel();
        nomeFormattedTextField = new javax.swing.JFormattedTextField();
        nomeLabel = new javax.swing.JLabel();
        dataEntregaFormattedTextField = new javax.swing.JFormattedTextField();
        dataEntregaLabel = new javax.swing.JLabel();
        finalizacaoPainel = new javax.swing.JPanel();
        comprarBtn = new javax.swing.JToggleButton();
        pixRadioButton = new javax.swing.JRadioButton();
        creditoRadioButton = new javax.swing.JRadioButton();
        debitoRadioButton = new javax.swing.JRadioButton();
        menu = new javax.swing.JMenuBar();
        perfilMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        admMenu = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Produto", "Quantidade", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout menusPainelLayout = new javax.swing.GroupLayout(menusPainel);
        menusPainel.setLayout(menusPainelLayout);
        menusPainelLayout.setHorizontalGroup(
            menusPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        menusPainelLayout.setVerticalGroup(
            menusPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 193, Short.MAX_VALUE)
        );

        produtoLabel.setText("Produtos");

        produtosComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        quantidadeSpn.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                quantidadeSpnVetoableChange(evt);
            }
        });

        quantidadeLabel.setText("Quantidade");

        adicionarBtn.setText("Adicionar");
        adicionarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarBtnActionPerformed(evt);
            }
        });

        removerBtn.setText("Remover do Carrinho");
        removerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBtnActionPerformed(evt);
            }
        });

        limparBtn.setText("Limpar Carrinho");
        limparBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparBtnActionPerformed(evt);
            }
        });

        entregaPainel.setBorder(javax.swing.BorderFactory.createTitledBorder("Endereço"));
        entregaPainel.setPreferredSize(new java.awt.Dimension(1007, 86));

        entregaCheckBox.setText("Quero Entrega");
        entregaCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entregaCheckBoxActionPerformed(evt);
            }
        });

        estadoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        estadoLabel.setText("Estado");

        cepLabel1.setText("CEP");

        cidadeLabel.setText("Cidade");

        bairroLabel.setText("Bairro");

        ruaLabel.setText("Rua");

        numeroLabel.setText("Número");

        complementoLabel.setText("Complemento");

        nomeLabel.setText("Nome");

        dataEntregaLabel.setText("Data de Entrega");

        javax.swing.GroupLayout entregaPainelLayout = new javax.swing.GroupLayout(entregaPainel);
        entregaPainel.setLayout(entregaPainelLayout);
        entregaPainelLayout.setHorizontalGroup(
            entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(entregaPainelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(entregaCheckBox)
                    .addGroup(entregaPainelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cepLabel1)
                            .addComponent(cepFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cidadeFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cidadeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(estadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(estadoLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bairroFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bairroLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ruaFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ruaLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(entregaPainelLayout.createSequentialGroup()
                                .addComponent(numeroFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(complementoFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(entregaPainelLayout.createSequentialGroup()
                                .addComponent(numeroLabel)
                                .addGap(18, 18, 18)
                                .addComponent(complementoLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nomeFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nomeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dataEntregaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dataEntregaFormattedTextField))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        entregaPainelLayout.setVerticalGroup(
            entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, entregaPainelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(entregaCheckBox)
                .addGap(9, 9, 9)
                .addGroup(entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cidadeLabel)
                    .addComponent(cepLabel1)
                    .addComponent(estadoLabel)
                    .addComponent(bairroLabel)
                    .addComponent(ruaLabel)
                    .addComponent(numeroLabel)
                    .addComponent(complementoLabel)
                    .addComponent(nomeLabel)
                    .addComponent(dataEntregaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(entregaPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cepFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cidadeFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(estadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bairroFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ruaFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numeroFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(complementoFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataEntregaFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        finalizacaoPainel.setBorder(javax.swing.BorderFactory.createTitledBorder("Pagamento"));
        finalizacaoPainel.setPreferredSize(new java.awt.Dimension(1007, 86));

        comprarBtn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        comprarBtn.setText("Finalizar Compra");
        comprarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprarBtnActionPerformed(evt);
            }
        });

        pixRadioButton.setText("Pix");

        creditoRadioButton.setText("Crédito");
        creditoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditoRadioButtonActionPerformed(evt);
            }
        });

        debitoRadioButton.setText("Débito");

        javax.swing.GroupLayout finalizacaoPainelLayout = new javax.swing.GroupLayout(finalizacaoPainel);
        finalizacaoPainel.setLayout(finalizacaoPainelLayout);
        finalizacaoPainelLayout.setHorizontalGroup(
            finalizacaoPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(finalizacaoPainelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(debitoRadioButton)
                .addGap(18, 18, 18)
                .addComponent(creditoRadioButton)
                .addGap(18, 18, 18)
                .addComponent(pixRadioButton)
                .addGap(18, 18, 18)
                .addComponent(comprarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        finalizacaoPainelLayout.setVerticalGroup(
            finalizacaoPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(finalizacaoPainelLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(finalizacaoPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(debitoRadioButton)
                    .addComponent(creditoRadioButton)
                    .addComponent(pixRadioButton)
                    .addComponent(comprarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        perfilMenu.setText("Perfil");

        jMenuItem1.setText("Histórico de Compras");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        perfilMenu.add(jMenuItem1);

        jMenuItem2.setText("Sair");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        perfilMenu.add(jMenuItem2);

        menu.add(perfilMenu);

        admMenu.setText("Administrador Área");

        jMenuItem3.setText("Produtos");
        admMenu.add(jMenuItem3);

        menu.add(admMenu);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(produtoLabel)
                                .addGap(124, 124, 124)
                                .addComponent(quantidadeLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(produtosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(quantidadeSpn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(adicionarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(removerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(limparBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 196, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(entregaPainel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE)
                            .addComponent(finalizacaoPainel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(menusPainel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adicionarBtn)
                            .addComponent(removerBtn)
                            .addComponent(quantidadeSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(limparBtn)
                            .addComponent(produtosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(produtoLabel)
                        .addComponent(quantidadeLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(menusPainel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(entregaPainel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finalizacaoPainel, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void creditoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditoRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_creditoRadioButtonActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new TelaLogin().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void quantidadeSpnVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_quantidadeSpnVetoableChange
    }//GEN-LAST:event_quantidadeSpnVetoableChange

    private void adicionarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarBtnActionPerformed
        adicionarProduto();
    }//GEN-LAST:event_adicionarBtnActionPerformed

    private void removerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBtnActionPerformed
        removerProduto();
    }//GEN-LAST:event_removerBtnActionPerformed

    private void limparBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparBtnActionPerformed
        limparCarrinho();
    }//GEN-LAST:event_limparBtnActionPerformed

    private void comprarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprarBtnActionPerformed
        List<ItemComprado> itensComprados = new ArrayList<>();
        Compra compra;
        if (cntrl.listarProdutosCarrinho(carrinho.getId()).isEmpty()) {
            JOptionPane.showMessageDialog(this, "Você não tem nenhum produto para finalizar a compra!\nAdicione algo (:");
        } else if (formaPagamentoGroup.getSelection() == null) {
            JOptionPane.showMessageDialog(this, "Escolha uma forma de pagamento antes de finalizar a compra.");
        } else if (entregaCheckBox.isSelected() == false) {
            for (ItemCarrinho ic : cntrl.listarProdutosCarrinho(carrinho.getId())) {
                Produto p = (Produto) prdao.read(ic.getProdutoID());
                ItemComprado item = new ItemComprado(p, ic.getQuantidade(), cntrl.produtoValor(carrinho.getId(), p.getId()));
                itensComprados.add(item);
            }
            compra = new Compra(this.historico.getId(), itensComprados, cntrl.calculoTotal(this.carrinho.getId()), LocalDate.now(), false, retornaTipoPagamento());
            cdao.create(compra);
            limparCarrinho();
            JOptionPane.showMessageDialog(this, compra.toString());
        } else {
            for (ItemCarrinho ic : cntrl.listarProdutosCarrinho(carrinho.getId())) {
                Produto p = (Produto) prdao.read(ic.getProdutoID());
                ItemComprado item = new ItemComprado(p, ic.getQuantidade(), cntrl.produtoValor(carrinho.getId(), p.getId()));
                itensComprados.add(item);
            }
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate data_entrega = LocalDate.parse(dataEntregaFormattedTextField.getText(), formatter);
            compra = new Compra(historico.getId(), itensComprados, cntrl.calculoTotal(carrinho.getId()), data_entrega, true, retornaTipoPagamento(), getEndereco());
            cdao.create(compra);
            JOptionPane.showMessageDialog(this, compra.toString());
            limparCarrinho();
        }


    }//GEN-LAST:event_comprarBtnActionPerformed

    private void entregaCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entregaCheckBoxActionPerformed
        enderecoCheckBox();
    }//GEN-LAST:event_entregaCheckBoxActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaLoja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaLoja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaLoja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaLoja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaLoja().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionarBtn;
    private javax.swing.JMenu admMenu;
    private javax.swing.JFormattedTextField bairroFormattedTextField;
    private javax.swing.JLabel bairroLabel;
    private javax.swing.JFormattedTextField cepFormattedTextField;
    private javax.swing.JLabel cepLabel1;
    private javax.swing.JFormattedTextField cidadeFormattedTextField;
    private javax.swing.JLabel cidadeLabel;
    private javax.swing.JFormattedTextField complementoFormattedTextField;
    private javax.swing.JLabel complementoLabel;
    private javax.swing.JToggleButton comprarBtn;
    private javax.swing.JRadioButton creditoRadioButton;
    private javax.swing.JFormattedTextField dataEntregaFormattedTextField;
    private javax.swing.JLabel dataEntregaLabel;
    private javax.swing.JRadioButton debitoRadioButton;
    private javax.swing.JCheckBox entregaCheckBox;
    private javax.swing.JPanel entregaPainel;
    private javax.swing.JComboBox<String> estadoComboBox;
    private javax.swing.JLabel estadoLabel;
    private javax.swing.JPanel finalizacaoPainel;
    private javax.swing.ButtonGroup formaPagamentoGroup;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton limparBtn;
    private javax.swing.JMenuBar menu;
    private javax.swing.JPanel menusPainel;
    private javax.swing.JFormattedTextField nomeFormattedTextField;
    private javax.swing.JLabel nomeLabel;
    private javax.swing.JFormattedTextField numeroFormattedTextField;
    private javax.swing.JLabel numeroLabel;
    private javax.swing.JMenu perfilMenu;
    private javax.swing.JRadioButton pixRadioButton;
    private javax.swing.JLabel produtoLabel;
    private javax.swing.JComboBox<String> produtosComboBox;
    private javax.swing.JLabel quantidadeLabel;
    private javax.swing.JSpinner quantidadeSpn;
    private javax.swing.JButton removerBtn;
    private javax.swing.JFormattedTextField ruaFormattedTextField;
    private javax.swing.JLabel ruaLabel;
    // End of variables declaration//GEN-END:variables

    private void adminArea() {
        boolean isAdmin = false;
        admMenu.setVisible(isAdmin);

        Pessoa p = (Pessoa) PessoaDAO.getInstance().read(usuario_id);
        if (p.getUser().getTipoUsuario().ordinal() == 1) {
            isAdmin = true;
            admMenu.setVisible(isAdmin);
        }

    }

    private Endereco getEndereco() {
        boolean status = true;
        int numero = 0;

        String cep = cepFormattedTextField.getText();

        if (cep.isEmpty()) {
            JOptionPane.showMessageDialog(this, "CEP não foi informado");
            cepFormattedTextField.grabFocus();
            status = false;
        }

        String cidade = cidadeFormattedTextField.getText();

        if (cidade.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Cidade não foi informada");
            cidadeFormattedTextField.grabFocus();
            status = false;
        }

        UnidadeFederacao uf = UnidadeFederacao.fromSigla((String) estadoComboBox.getSelectedItem());

        String bairro = bairroFormattedTextField.getText();

        if (bairro.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bairro não foi informado");
            bairroFormattedTextField.grabFocus();
            status = false;
        }

        String rua = ruaFormattedTextField.getText();

        if (rua.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Rua não foi informada");
            ruaFormattedTextField.grabFocus();
            status = false;
        }

        try {
            numero = Integer.parseInt(numeroFormattedTextField.getText());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Erro ao informar número");
            numeroFormattedTextField.grabFocus();
            status = false;
        }

        String complemento = complementoFormattedTextField.getText();

        if (complemento.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Complemento não foi informado");
            complementoFormattedTextField.grabFocus();
            status = false;
        }

        String nome = nomeFormattedTextField.getText();

        if (nome.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nome não foi informado");
            nomeFormattedTextField.grabFocus();
            status = false;
        }

        if (status) {
            Endereco endereco = new Endereco(cep, cidade, uf, bairro, rua, numero, complemento, nome);
            JOptionPane.showMessageDialog(this, endereco.toString());
            return endereco;
        }

        return null;

    }

    private void limparCarrinho() {
        cntrl.limparCarrinho(carrinho.getId());
        atualizarTabelaCarrinho();
    }

    private void adicionarProduto() {
        Produto p = produtoSelecionado();
        int quantidade = (int) quantidadeSpn.getValue();
        if (quantidade <= 0) {
            cntrl.adicionarProdutosCarrinho(carrinho.getId(), p.getId(), 1);
            atualizarTabelaCarrinho();
            return;
        }
        cntrl.adicionarProdutosCarrinho(carrinho.getId(), p.getId(), quantidade);
        atualizarTabelaCarrinho();
    }

    private void removerProduto() {
        Produto p = produtoSelecionado();
        Integer chave[] = {carrinho.getId(), p.getId()};
        ItemCarrinho item = (ItemCarrinho) ItemCarrinhoDAO.getInstance().read(chave);
        int quantidade = (int) quantidadeSpn.getValue();
        if (quantidade <= 0) {
            cntrl.removerProdutoCarrinho(carrinho.getId(), p.getId(), 1);
            atualizarTabelaCarrinho();
            return;
        } else if (quantidade >= item.getQuantidade()) {
            cntrl.apagarProdutoCarrinho(carrinho.getId(), p.getId());
            atualizarTabelaCarrinho();
            return;
        }
        cntrl.removerProdutoCarrinho(carrinho.getId(), p.getId(), quantidade);
        atualizarTabelaCarrinho();
    }

    private Produto produtoSelecionado() {
        String produto_escolhido = (String) produtosComboBox.getSelectedItem();
        for (Produto p : prdao.listarTudo()) {
            String nome_produto = p.getMarca() + " " + p.getNome() + " - R$" + p.getPreco();
            if (produto_escolhido.equals(nome_produto)) {
                return p;
            }
        }

        return null;
    }

    private void enderecoCheckBox() {
        boolean selecionado = entregaCheckBox.isSelected();

        cepFormattedTextField.setEnabled(false);
        cidadeFormattedTextField.setEnabled(false);
        estadoComboBox.setEnabled(false);
        bairroFormattedTextField.setEnabled(false);
        ruaFormattedTextField.setEnabled(false);
        numeroFormattedTextField.setEnabled(false);
        complementoFormattedTextField.setEnabled(false);
        nomeFormattedTextField.setEnabled(false);
        dataEntregaFormattedTextField.setEnabled(false);

        if (selecionado) {
            cepFormattedTextField.setEnabled(true);
            cidadeFormattedTextField.setEnabled(true);
            estadoComboBox.setEnabled(true);
            bairroFormattedTextField.setEnabled(true);
            ruaFormattedTextField.setEnabled(true);
            numeroFormattedTextField.setEnabled(true);
            complementoFormattedTextField.setEnabled(true);
            nomeFormattedTextField.setEnabled(true);
            dataEntregaFormattedTextField.setEnabled(true);
        }
    }

    private void preencherComboBoxProdutos() {
        produtosComboBox.removeAllItems();
        List<Produto> produtos = prdao.listarTudo();
        for (Produto produto : produtos) {
            produtosComboBox.addItem(produto.getMarca() + " " + produto.getNome()
                    + " - R$" + produto.getPreco());
        }
    }

    private void preencherComboBoxEstado() {
        estadoComboBox.removeAllItems();
        for (UnidadeFederacao estado : UnidadeFederacao.values()) {
            estadoComboBox.addItem(estado.getSigla());
        }
    }

    private void configurarTabela() {
        // Configura o DefaultTableModel para a jTable1
        tableModel = new DefaultTableModel(
                new Object[][]{}, // Dados iniciais (vazio)
                new String[]{"Produto", "Quantidade", "Valor"} // Nomes das colunas
        );

        jTable1.setModel(tableModel);
    }

    private void atualizarTabelaCarrinho() {
        tableModel.setRowCount(0);

        for (ItemCarrinho item : cntrl.listarProdutosCarrinho(carrinho.getId())) {
            Produto p = (Produto) prdao.read(item.getProdutoID());
            Object[] rowData = {
                p.getMarca() + " " + p.getNome(),
                item.getQuantidade(),
                cntrl.produtoValor(carrinho.getId(), item.getProdutoID())
            };
            tableModel.addRow(rowData);
        }
    }

    private void adicionaRadioButton() {
        formaPagamentoGroup.add(debitoRadioButton);
        formaPagamentoGroup.add(creditoRadioButton);
        formaPagamentoGroup.add(pixRadioButton);
    }

    private TipoPagamento retornaTipoPagamento() {
        TipoPagamento tp;
        if (formaPagamentoGroup.getSelection() != null) {
            if (debitoRadioButton.isSelected()) {
                // O usuário selecionou Débito
                tp = TipoPagamento.DEBITO;
                return tp;
                // Agora você pode usar o tipoPagamento como necessário
            } else if (creditoRadioButton.isSelected()) {
                // O usuário selecionou Crédito
                return tp = TipoPagamento.CREDITO;
                // Agora você pode usar o tipoPagamento como necessário
            } else if (pixRadioButton.isSelected()) {
                // O usuário selecionou Pix
                return tp = TipoPagamento.PIX;
                // Agora você pode usar o tipoPagamento como necessário
            }
        }
        return null;
    }
}
